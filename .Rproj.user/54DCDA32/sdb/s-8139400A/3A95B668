{
    "collab_server" : "",
    "contents" : "#' @import RPostgreSQL\n#' @import XML\n#' @import dplyr\n#' @import jsonlite\n#' @importFrom lubridate minutes\n#' @importFrom lubridate hours\n#' @importFrom lubridate seconds\n#' @import stringr\n#' @import zoo\n#' @export writePG\n#' @export getLastGame\n#' @export getDoneGames\n#' @export checkActual\n#' @export getPlayers\n#' @export getPgData\n#' @export getShotchart\n#' @export getBoxscoreAdv\n#' @export doBoxscore\n#' @export getBoxscoreMisc\n#' @export getBoxscorePt\n#' @export getBoxscoreTrad\n#' @export getPlaybyplay\n#' @export getPlayerlist\n#' @export getPlayerInfo\n#' @export getPlaytypePlayer\n#' @export getPlaytypeTeam\n#' @export getSchedule\n#' @export getNbaSchedule\n#' @export mo2Num\n#'\n\n\ntraditional <- NULL\ncalendar <- NULL\ns5v <- NULL\ns5h <- NULL\nna.locf <- NULL\nteamlist <- NULL\nshotchart <- NULL\nPLAYER_ID <- NULL\ns <- NULL\nplaybyplay <- NULL\nadvanced <- NULL\nmisc <- NULL\nptracking <- NULL\neff_area <- NULL\neff_type <- NULL\n\nwritePG <- function(data, dbname, schemat =\"rd\"){\n  on.exit(dbDisconnect(con))\n  tryCatch({\n    dane<- readRDS(data)\n    name <- gsub(\".//nba16//\",\"\",data)\n    name <- gsub(\".RDS\",\"\",name)\n    require(RPostgreSQL)\n    drv <- dbDriver(\"PostgreSQL\")\n    con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n    if(name %in% c(\"traditional\",\"advanced\",\"misc\",\"ptracking\",\"playbyplay\")){\n      dbWriteTable(con, c(schemat, name), value = dane, overwrite = FALSE, row.names = FALSE, append = T)\n\n    }else{\n      dbWriteTable(con, c(schemat, name), value = dane, overwrite = T, row.names = FALSE, append = F)\n    }\n    if(name == \"shotchart\"){\n      dbSendQuery(con, paste(\"CREATE UNIQUE INDEX uix_shc ON rd.shotchart\n                             USING btree\n                             (\\\"GAME_ID\\\" COLLATE pg_catalog.\\\"default\\\",\n                             \\\"PLAYER_ID\\\" COLLATE pg_catalog.\\\"default\\\",\n                             \\\"GAME_EVENT_ID\\\" COLLATE pg_catalog.\\\"default\\\");\",sep=\"\"))\n    }\n  },error = function(err){\n    print(paste(\"No table\", sep=\" \"))\n  })\n}\n\ngetLastGame <- function(dbname, date = Sys.Date()-1){\n  on.exit(dbDisconnect(con))\n  require(RPostgreSQL)\n  drv <- dbDriver(\"PostgreSQL\")\n  con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n  query <- paste(\"select max(\\\"GAME_ID\\\") from rd.calendar where date = \\'\",date,\"\\'\",sep=\"\")\n  return(as.character(dbGetQuery(con, query)))\n\n}\n\ngetDoneGames <- function(dbname,date = Sys.Date()-1){\n  on.exit(dbDisconnect(con))\n  require(RPostgreSQL)\n  drv <- dbDriver(\"PostgreSQL\")\n  con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n  query <- paste(\"select \\\"GAME_ID\\\" from rd.calendar where date <= \\'\",date,\"\\'\",sep=\"\")\n  return(as.character(unlist(as.list(dbGetQuery(con, query)))))\n}\n\ncheckActual <- function(table, dbname, date = Sys.Date()-1){\n  on.exit(dbDisconnect(con))\n  require(RPostgreSQL)\n  drv <- dbDriver(\"PostgreSQL\")\n  con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n  query <- paste(\"select distinct \\\"GAME_ID\\\" from rd.\",table,sep=\"\")\n  #return(as.character(unlist(as.list(dbGetQuery(con, query)))))\n  gms <- as.character(unlist(as.list(dbGetQuery(con, query))))\n  rez <- match(getDoneGames(),gms)\n  if(any(is.na(rez) == T)){\n    return(getDoneGames()[is.na(rez) == T])\n  }else{\n    return(NULL)\n  }\n}\n\ngetPlayers <- function(x, dbname = \"NBA16\"){\n  on.exit(dbDisconnect(con))\n  require(RPostgreSQL)\n  drv <- dbDriver(\"PostgreSQL\")\n  con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n  query <- paste(\"select distinct \\\"PLAYER_ID\\\" from rd.playerlist\",sep=\"\")\n  pls <- as.character(unlist(as.list(dbGetQuery(con, query))))\n  return(pls)\n}\n\ngetPgData <- function(dbname, schema){\n  on.exit(dbDisconnect(con))\n  require(RPostgreSQL)\n  drv <- dbDriver(\"PostgreSQL\")\n  con <- dbConnect(drv, dbname = dbname, host = \"localhost\", port = 5432, user = \"postgres\", password = \"postgres\")\n  query <-paste(\"select table_name FROM information_schema.tables where table_schema = \\'\",schema,\"\\'\",sep=\"\")\n  tbs <- as.character(unlist(as.list(dbGetQuery(con, query))))\n  #return(sapply(tbs,FUN = function(x) dbReadTable(con, c(schema, x))))\n  #return(tbs)\n  i <- 1\n  for(i in 1:length(tbs))\n  {\n    assign(tbs[i],dbReadTable(con, c(\"rd\",tbs[i])), pos =.GlobalEnv)\n  }\n\n}\n\n\ngetShotchart <- function(playerID, season = \"2016-17\"){\n  url <- paste(\"http://stats.nba.com/stats/shotchartdetail?CFID=33&CFPARAMS=\",season,\"&ContextFilter=&ContextMeasure=FGA&DateFrom=&DateTo=&GameID=&GameSegment=&LastNGames=0&LeagueID=00&Location=&MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&PerMode=PerGame&Period=0&PlayerID=\",playerID,\"&PlusMinus=N&PlayerPosition=&Rank=N&RookieYear=&Season=\",season,\"&SeasonSegment=&SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=&mode=Advanced&showDetails=0&showShots=1&showZones=0\", sep=\"\")\n  web_page <- readLines(url,warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \",\",x3, perl=TRUE)\n  shot_chart<-read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE, row.names = NULL)\n  shot_chart2 <- shot_chart[shot_chart$GRID_TYPE == 'Shot Chart Detail', -c(1,22)]\n  return(shot_chart2)\n}\n\n\n\ngetBoxscoreAdv <- function(gameID){\n  require(lubridate)\n  url <- paste(\"http://stats.nba.com/stats/boxscoreadvancedv2?EndPeriod=10&EndRange=28800&GameID=\",gameID,\"&RangeType=0&Season=2016-17&SeasonType=Regular+Season&StartPeriod=1&StartRange=0\", sep = \"\")\n  web_page <- readLines(url,warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \"|\",x3, perl=TRUE)\n  bs<- read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  bsb <- bs[ grepl(\"[[:digit:]]\", bs$PLAYER_ID) == TRUE,  names(bs) != \"X\"]\n  bsb[bsb[,] == \"null\"] = NA\n  bsb[bsb[,] == \"\"] = NA\n  bsb[,10:ncol(bsb)] <- sapply(bsb[,10:ncol(bsb)], as.numeric)\n  bsb$MINS <- as.numeric(minute(ms(bsb[,9])))\n  bsb$SECS <- as.numeric(second(ms(bsb[,9])))\n  bsb <- bsb[,-9]\n  return(bsb)\n}\n\ndoBoxscore <- function(traditional=traditional, advanced = advanced, misc = misc, ptracking=ptracking){\n  require(dplyr)\n  boxscore_all <- left_join(traditional, advanced)\n  boxscore_all <- left_join(boxscore_all, misc)\n  boxscore_all <- left_join(boxscore_all, ptracking)\n  return(boxscore_all)\n}\n\n\ngetBoxscoreMisc <- function(gameID){\n  require(lubridate)\n  url <- paste(\"http://stats.nba.com/stats/boxscoremiscv2?EndPeriod=10&EndRange=28800&GameID=\",gameID,\"&RangeType=0&Season=2016-17&SeasonType=Regular+Season&StartPeriod=1&StartRange=0\", sep = \"\")\n  web_page <- readLines(url,warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \"|\",x3, perl=TRUE)\n  bs<- read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  bsb <- bs[ grepl(\"[[:digit:]]\", bs$PLAYER_ID) == TRUE,  names(bs) != \"X\"]\n  bsb[bsb[,] == \"null\"] = NA\n  bsb[bsb[,] == \"\"] = NA\n  bsb[,10:ncol(bsb)] <- sapply(bsb[,10:ncol(bsb)], as.numeric)\n  bsb$MINS <- as.numeric(minute(ms(bsb[,9])))\n  bsb$SECS <- as.numeric(second(ms(bsb[,9])))\n  bsb <- bsb[,-9]\n  return(bsb)\n}\n\n\n\ngetBoxscorePt <- function(gameID){\n  require(lubridate)\n  url <- paste(\"http://stats.nba.com/stats/boxscoreplayertrackv2?EndPeriod=10&EndRange=28800&GameID=\",gameID,\"&RangeType=0&Season=2016-17&SeasonType=Regular+Season&StartPeriod=1&StartRange=0\", sep = \"\")\n  web_page <- readLines(url,warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \"|\",x3, perl=TRUE)\n  bs<- read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  bsb <- bs[ grepl(\"[[:digit:]]\", bs$PLAYER_ID) == TRUE,  names(bs) != \"X\"]\n  bsb[bsb[,] == \"null\"] = NA\n  bsb[bsb[,] == \"\"] = NA\n  bsb[,10:ncol(bsb)] <- sapply(bsb[,10:ncol(bsb)], as.numeric)\n  bsb$MINS <- as.numeric(minute(ms(bsb[,9])))\n  bsb$SECS <- as.numeric(second(ms(bsb[,9])))\n  bsb <- bsb[,-9]\n  return(bsb)\n}\n\n\ngetBoxscoreTrad <- function(gameID){\n  require(lubridate)\n  url <- paste(\"http://stats.nba.com/stats/boxscoretraditionalv2?EndPeriod=10&EndRange=28800&GameID=\",gameID,\"&RangeType=0&Season=2016-17&SeasonType=Regular+Season&StartPeriod=1&StartRange=0\", sep = \"\")\n  web_page <- readLines(url,warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \"|\",x3, perl=TRUE)\n  bs<- read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  bsb <- bs[ grepl(\"[[:digit:]]\", bs$PLAYER_ID) == TRUE,  names(bs) != \"X\"]\n  bsb[bsb[,] == \"null\"] = NA\n  bsb[bsb[,] == \"\"] = NA\n  bsb$MINS <- as.numeric(minute(ms(bsb[,9])))\n  bsb$SECS <- as.numeric(second(ms(bsb[,9])))\n  bsb[,10:28] <- sapply(bsb[,10:28], as.numeric)\n  bsb$MINS <- as.numeric(minute(ms(bsb[,9])))\n  bsb$SECS <- as.numeric(second(ms(bsb[,9])))\n  bsb <- bsb[,-9]\n  return(bsb)\n}\n\n\n\n\n\n\n\ngetPlaybyplay <- function(gameID){\n  require(lubridate)\n  require(stringr)\n  require(dplyr)\n  require(zoo)\n\n  url <- paste(\"http://stats.nba.com/stats/playbyplay?GameID=\", gameID, \"&StartPeriod=0&EndPeriod=14\", sep=\"\")\n  web_page <- readLines(url, warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \",\",x3, perl=TRUE)\n  bs<-read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  bsb <- bs[bs$GAME_ID == gameID,  names(bs) != \"X\"]\n  bsb[bsb[,] == \"null\"] = NA\n  bsb[bsb[,] == \"\"] = NA\n  bsb$MINS <- as.numeric(minute(ms(bsb$PCTIMESTRING)))\n  bsb$SECS <- as.numeric(second(ms(bsb$PCTIMESTRING)))\n  bsb[1,c(\"SCORE\",\"SCOREMARGIN\")] <- c(\"0 - 0\",0)\n  bsb[,11:12] <- apply(bsb[,11:12],2,na.locf)\n  return(bsb)\n}\n\n\n\ngetPlayerlist <- function(season = \"2016-17\"){\n  require(dplyr)\n  url  <- paste(\"http://stats.nba.com/stats/commonallplayers?LeagueID=00&Season=\",season,\"&IsOnlyCurrentSeason=1%20\", sep=\"\")\n  web_page <- readLines(url, warn = F)\n  x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n  x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n  x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n  x4 <- gsub(\";\", \",\",x3, perl=TRUE)\n\n  playerlist<-read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  playerlist<-playerlist[,c(1,3,4,5,6,8,10,11,13)]\n  playerlist$PERSON_ID <- as.character(playerlist$PERSON_ID)\n  playerlist$TEAM_ID <- as.character(playerlist$TEAM_ID)\n  colnames(playerlist)[1] <- \"PLAYER_ID\"\n  return(playerlist)\n}\n\n\n\ngetPlayerInfo <- function(playerID){\n  require(jsonlite)\n  require(dplyr)\n  tryCatch({\n    url <- paste(\"http://stats.nba.com/stats/commonplayerinfo?LeagueID=00&PlayerID=\",playerID,\"&SeasonType=Regular+Season\",sep=\"\")\n    web_page <- readLines(url, warn = F)\n    x1 <- fromJSON(web_page)\n    x2 <- x1[[3]]\n    hx2 <-as.data.frame(unlist(x2$headers))\n    hx2$v <- as.data.frame(unlist(x2$rowSet))\n    cols <- c(\"DISPLAY_FIRST_LAST\",\"BIRTHDATE\", \"SCHOOL\"\n              ,\"COUNTRY\",\"HEIGHT\",\"WEIGHT\",\"SEASON_EXP\",\"POSITION\",\"TEAM_ABBREVIATION\",\"PLAYER_ID\")\n    colnames(hx2) <- c(\"attribute\",\"value\")\n    x3 <- as.data.frame(t(hx2[hx2$attribute %in% cols, \"value\"]),stringsAsFactors = F)\n    colnames(x3) <- cols\n    x3$WEIGHT <- as.numeric(x3$WEIGHT)\n    x3$HEIGHT <- round(\n      (as.numeric(substr(x3$HEIGHT, 1, 1))*30.5+\n         as.numeric(substr(x3$HEIGHT, 3, 5))*2.54\n      ),digits =0)\n    return(x3)},error = function(err){\n      return(NULL)\n    })\n}\n\n\n\ngetPlaytypePlayer <- function(playtype, what = \"offensive\", season = \"2016\"){\n\n  if(playtype %in% c(\"PostTouch\",\"ElbowTouch\",\"PaintTouch\",\"SpeedDistance\",\"CatchShoot\",\n                     \"Defense\",\"Drives\",\"Passing\",\"Possessions\",\"PullUpShot\",\"Rebounding\",\"Efficiency\")){\n    url <- paste(\"http://stats.nba.com/stats/leaguedashptstats?College=&Conference=&%20Country=&DateFrom=&DateTo=&Division=&DraftPick=&DraftYear=%20&GameScope=&Height=&LastNGames=0&LeagueID=00&Location=&Month=0&OpponentTeamID=0&Outcome=&PORound=0%20&PerMode=PerGame&PlayerExperience=&PlayerOrTeam=Player&PlayerPosition=&PtMeasureType=\",playtype,\"&Season=2016-17&SeasonSegment=&SeasonType=Regular+Season&StarterBench=%20&TeamID=0&VsConference=&VsDivision=&Weight=\", sep = \"\")\n    web_page <- readLines(url, warn = F)\n    x1 <- gsub(\"[\\\\{\\\\}\\\\]]\", \"\", web_page, perl=TRUE)\n    x2 <- gsub(\"[\\\\[]\", \"\\n\", x1, perl=TRUE)\n    x3 <- gsub(\"\\\"rowSet\\\":\\n\", \"\", x2, perl=TRUE)\n    x4 <- gsub(\";\", \",\",x3, perl=TRUE)\n    nba<-read.table(textConnection(x4), header=T, sep=\",\", skip=2, stringsAsFactors=FALSE, fill = TRUE)\n  }\n\n  if(playtype %in% c(\"Isolation\",\"Transition\",\"Postup\",\"PRBallHandler\",\"PRRollman\",\"Spotup\",\n                     \"Handoff\",\"Cut\",\"OffScreen\",\"OffRebound\")){\n    url <- paste(\"http://stats-prod.nba.com/wp-json/statscms/v1/synergy/player/?category=\",playtype,\"&limit=500&name=\",what,\"&q=2452161&season=\",season,\"&seasonType=Reg\", sep =\"\")\n    web_page <- readLines(url, warn = F)\n    nba <- as.data.frame(fromJSON(web_page),stringsAsFactors = FALSE)\n  }\n\n  ###yeah I know, but I need specified columns for each table\n\n  if(playtype == \"CatchShoot\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"CATCH_SHOOT_FGM\",\"CATCH_SHOOT_FGA\",\n                                            \"CATCH_SHOOT_FG_PCT\",  \"CATCH_SHOOT_PTS\", \"CATCH_SHOOT_FG3M\", \"CATCH_SHOOT_FG3A\",\"CATCH_SHOOT_FG3_PCT\", \"CATCH_SHOOT_EFG_PCT\")}\n  if(playtype == \"Drives\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"DRIVE_FGM\",\"DRIVE_FGA\",\n                                        \"DRIVES\",\"DRIVE_FTM\",\"DRIVE_FTA\",\"DRIVE_PTS\",\"DRIVE_PASSES\",\"DRIVE_AST\",\"DRIVE_TOV\",\"DRIVE_PF\" )}\n  if(playtype == \"ElbowTouch\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"TOUCHES\",\"ELBOW_TOUCHES\", \"ELBOW_TOUCH_FGM\",\"ELBOW_TOUCH_FGA\" ,\n                                            \"ELBOW_TOUCH_FTM\",\"ELBOW_TOUCH_FTA\",\"ELBOW_TOUCH_PTS\" ,\"ELBOW_TOUCH_PASSES\" ,\"ELBOW_TOUCH_AST\", \"ELBOW_TOUCH_TOV\" ,\"ELBOW_TOUCH_FOULS\" )}\n  if(playtype == \"PaintTouch\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"PAINT_TOUCH_FGM\",\"PAINT_TOUCH_FGA\",\"TOUCHES\"\n                                            ,\"PAINT_TOUCHES\",\"PAINT_TOUCH_FTA\",\"PAINT_TOUCH_FTM\",\"PAINT_TOUCH_PTS\",\"PAINT_TOUCH_PASSES\",\"PAINT_TOUCH_AST\",\"PAINT_TOUCH_TOV\",\"PAINT_TOUCH_FOULS\")}\n  if(playtype == \"PostTouch\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"TOUCHES\",\"POST_TOUCHES\",\"POST_TOUCH_FGM\",\"POST_TOUCH_FGA\",\"POST_TOUCH_FTA\",\"POST_TOUCH_FTM\",\n                                           \"POST_TOUCH_PTS\",\"POST_TOUCH_PASSES\",\"POST_TOUCH_AST\",\"POST_TOUCH_TOV\",\"POST_TOUCH_FOULS\")}\n  if(playtype == \"PullUpShot\"){getcols <- c(\"PLAYER_ID\",\"PLAYER_NAME\",\"PULL_UP_FGM\",\"PULL_UP_FGA\",\"PULL_UP_FG3M\",\"PULL_UP_FG3A\",\"PULL_UP_PTS\")}\n\n  if(playtype %in% c(\"Cut\",\"PRRollman\",\"PRBallHandler\",\"Transition\",\n                     \"Spotup\",\"OffScreen\",\"Isolation\",\"Handoff\",\"OffRebound\",\"Postup\")){getcols <- c(\"results.PlayerIDSID\", \"results.Poss\" ,\"results.FGA\",\n                                                                                                     \"results.FGM\",\"results.Points\" ,\"results.PlusOne\" ,\"results.FT\",\"results.TO\",\"results.SF\")\n                     nba <- nba[,getcols]\n                     cols <- c(\"POSS_\", \"FGA_\",\"FGM_\",\"POINTS_\",\"PLUSONE_\",\"FT_\",\"TO_\",\"SF_\")\n                     cols <- paste(cols, toupper(playtype), sep=\"\")\n                     cold <- append(\"PLAYER_ID\", cols)\n                     colnames(nba) <- cold\n                     assign(paste(\"DF_\",playtype,sep=\"\"),nba)\n                     return(get(paste(\"DF_\",playtype,sep=\"\")))\n  }\n\n\n  if(playtype %in% c(\"PostTouch\",\"ElbowTouch\",\"PaintTouch\",\"SpeedDistance\",\"CatchShoot\",\n                     \"Defense\",\"Drives\",\"Passing\",\"Possessions\",\"PullUpShot\",\"Rebounding\",\"Efficiency\")){\n    nba <- nba[,getcols]\n    assign(paste(\"DF_\",playtype,sep=\"\"),nba)\n    return(get(paste(\"DF_\",playtype,sep=\"\")))\n  }\n}\n\n\n\n\n\ngetPlaytypeTeam <- function(playtype, what = \"defensive\", season = \"2016\"){\n\n  if(playtype %in% c(\"Isolation\",\"Transition\",\"Postup\",\"PRBallHandler\",\"PRRollman\",\"Spotup\",\n                     \"Handoff\",\"Cut\",\"OffScreen\",\"OffRebound\")){\n    url <- paste(\"http://stats-prod.nba.com/wp-json/statscms/v1/synergy/team/?category=\",playtype,\"&limit=500&name=\",what,\"&q=2452161&season=\",season,\"&seasonType=Reg\",sep=\"\")\n    web_page <- readLines(url, warn = F)\n    nba <- as.data.frame(fromJSON(web_page),stringsAsFactors = FALSE)\n\n    nba <- nba[,c(2,4,7,9,10,11,23,24,26)]\n    cols <- c(\"ABR_\", \"POSS_\",\"POINTS_\",\"FGA_\",\"FGM_\",\"FT_\",\"TO_\",\"PLUSONE_\")\n    cols <- paste(cols, toupper(playtype), sep=\"\")\n    cold <- append(\"TEAM_ID\", cols)\n    colnames(nba) <- cold\n    assign(paste(\"TEAM_\",playtype,sep=\"\"),nba)\n    return(get(paste(\"TEAM_\",playtype,sep=\"\")))\n\n  }\n}\n\n\n\n\n\nmo2Num <- function(x) match(tolower(x), tolower(month.abb))\n\ngetSchedule <- function(month){\n  require(XML)\n  require(stringr)\n  require(jsonlite)\n  doc.html <- htmlTreeParse(\n    paste('http://www.basketball-reference.com/leagues/NBA_2017_games-',month,'.html',sep=\"\"),useInternal = TRUE)\n  s <- as.data.frame(readHTMLTable(doc.html,stringsAsFactors= F),stringsAsFactors =F)\n  s <- s[,c(1,3,4,5,6,8)]\n  colnames(s) <- c(\"date\",\"visitor\",\"vpts\",\"home\",\"hpts\",\"to\")\n  s$d <- substr(s$date, 6, length(s$date))\n  s$d1 <- substr(s$d, 1, 3)\n  s$d1 <- mo2Num(s$d1)\n  s$d1 <- ifelse(nchar(s$d1) == 1, paste(\"0\",s$d1,sep=\"\"),s$d1)\n  s$d2 <- substr(s$d, 5, 6)\n  s$d2 <- ifelse(grepl(\",\",s$d2) == TRUE, paste(\"0\",substr(s$d2,1,1),sep=\"\"),s$d2)\n  s$d3 <- str_sub(s$d, -4)\n  s$date <- as.Date(paste(s$d3,s$d1, s$d2, sep=\"-\"))\n  s <- s[,1:6]\n  s$vpts <- as.numeric(s$vpts)\n  s$hpts <- as.numeric(s$hpts)\n  return(s)\n}\n\ngetNbaSchedule <- function(dt){\n  require(XML)\n  require(stringr)\n  require(jsonlite)\n  url <- paste(\"http://data.nba.com/data/10s/json/cms/noseason/scoreboard/\",dt,\"/games.json\", sep =\"\")\n  web_page <- readLines(url, warn = F)\n  tb <- as.data.frame(fromJSON(web_page),stringsAsFactors = F)\n  basic <- unique(tb[,c(18,15)])\n  colnames(basic) <- c(\"dateid\",\"GAME_ID\")\n  home <- tb$sports_content.games.game.home\n  home$TEAM_NAME <- paste(home$city, home$nickname, sep=\" \")\n  visit <- tb$sports_content.games.game.visitor\n  visit$TEAM_NAME <- paste(visit$city, visit$nickname, sep=\" \")\n  basic$home <- home$TEAM_NAME\n  basic$visitor <- visit$TEAM_NAME\n  return(basic)\n}\n\n\n\n\n\n\n",
    "created" : 1479222290243.000,
    "dirty" : false,
    "encoding" : "CP1250",
    "folds" : "",
    "hash" : "2667993537",
    "id" : "3A95B668",
    "lastKnownWriteTime" : 1479222423,
    "last_content_update" : 1479222423819,
    "path" : "D:/Dropbox/R programmin/NBAr/R/FUNKCJE.R",
    "project_path" : "R/FUNKCJE.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}